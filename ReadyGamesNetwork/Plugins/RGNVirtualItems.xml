<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGNVirtualItems</name>
    </assembly>
    <members>
        <member name="T:RGN.Modules.VirtualItems.BlockchainInfo">
            <summary>
            Blockchain Information for minted Virtual Items
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.BlockchainInfo.purchasedQuantity">
            <summary>
            How many time this item was purchased
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.BlockchainInfo.totalQuantity">
            <summary>
            Maximal count of virtual items to sell
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.BlockchainInfo.tokenId">
            <summary>
            The Id of the NFT liked to this virtual item
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.BlockchainInfo.walletAddress">
            <summary>
            The address of the original minter of the NFT
            </summary>
        </member>
        <member name="T:RGN.Modules.VirtualItems.PriceInfo">
            <summary>
            Represents pricing information for an item in the store.
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.PriceInfo.appIds">
            <summary>
            List of application ids where this price information is used
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.PriceInfo.itemId">
            <summary>
            Virtual item id related to this price information
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.PriceInfo.name">
            <summary>
            Name of the coin. Reserved name is "rgn-coin"
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.PriceInfo.quantity">
            <summary>
            Quantity of the coins the virtual item is sold for
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.PriceInfo.quantityWithoutDiscount">
            <summary>
            Quantity of the coins the virtual item is sold for without discount
            This field serves UI purposes to indicate "for sale" items
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.PriceInfo.group">
            <summary>
            Group information of the price. It is possible to group multiple prices together.
            For example, you can sell a virtual item for "coin_name_1" and "coin_name_2" coins
            This field works like a tag. Two prices with the same group name are combined together
            </summary>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RGN.Modules.VirtualItems.PriceInfo"/> class. 
            Used for JSON deserialization.
            </summary>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.#ctor(System.Collections.Generic.List{System.String},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RGN.Modules.VirtualItems.PriceInfo"/> class with specified appIds, itemId, name, and quantity.
            </summary>
            <param name="appIds">The list of application ids.</param>
            <param name="itemId">The id of the virtual item.</param>
            <param name="name">The name of the coin.</param>
            <param name="quantity">The quantity of coins this item is sold for.</param>
            <param name="quantityWithoutDiscount">The quantity of coins this item is sold for without discount. Defaults to maximum int value.</param>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.#ctor(System.Collections.Generic.List{System.String},System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:RGN.Modules.VirtualItems.PriceInfo"/> class with specified appIds, itemId, name, quantity, and group.
            </summary>
            <param name="appIds">The list of application ids.</param>
            <param name="itemId">The id of the virtual item.</param>
            <param name="name">The name of the price information.</param>
            <param name="quantity">The quantity of coins this item is sold for</param>
            <param name="group">The group name of the price.</param>
            <param name="quantityWithoutDiscount">The quantity of coins this item is sold for without discount. Defaults to maximum int value.</param>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.ToString">
            <summary>
            Converts the object's properties to string representation.
            </summary>
            <returns>A string that represents the object's properties.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.ToDiscountPriceCurrencyString">
            <summary>
            Converts the object's price properties to string representation, with discount markup if applicable.
            </summary>
            <returns>A string that represents the object's price properties.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.Equals(RGN.Modules.VirtualItems.PriceInfo)">
            <summary>
            Determines whether the specified PriceInfo object is equal to the current object.
            </summary>
            <param name="other">The PriceInfo object to compare with the current object.</param>
            <returns>true if the specified PriceInfo object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.CompareAppIds(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Compares two lists of application identifiers for equality.
            </summary>
            <param name="appIdsA">The first list of application identifiers.</param>
            <param name="appIdsB">The second list of application identifiers.</param>
            <returns>true if the two lists of application identifiers are equal; otherwise, false.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.System#IEquatable{RGN#Modules#VirtualItems#PriceInfo}#Equals(RGN.Modules.VirtualItems.PriceInfo)">
            <summary>
            Determines whether the specified PriceInfo object is equal to the current object.
            </summary>
            <param name="other">The PriceInfo object to compare with the current object.</param>
            <returns>true if the specified PriceInfo object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.PriceInfo.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:RGN.Modules.VirtualItems.Properties">
            <summary>
            Represents properties associated with a virtual item within the Ready Games Network (RGN).
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.Properties.appIds">
            <summary>
            List of application identifiers where the properties are used.
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.Properties.json">
            <summary>
            Game-specific properties in JSON format.
            </summary>
        </member>
        <member name="M:RGN.Modules.VirtualItems.Properties.#ctor">
            <summary>
            Default constructor for Properties.
            </summary>
        </member>
        <member name="M:RGN.Modules.VirtualItems.Properties.#ctor(System.String)">
            <summary>
            Creates a Properties instance with the specified JSON properties.
            </summary>
            <param name="json">Game-specific properties in JSON format.</param>
        </member>
        <member name="M:RGN.Modules.VirtualItems.Properties.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a Properties instance with the specified JSON properties and application identifiers.
            </summary>
            <param name="json">Game-specific properties in JSON format.</param>
            <param name="appIds">List of application identifiers where the properties are used.</param>
        </member>
        <member name="M:RGN.Modules.VirtualItems.Properties.BuildStringFromPropertiesList(System.Collections.Generic.List{RGN.Modules.VirtualItems.Properties})">
            <summary>
            Converts a list of Properties instances to a string representation.
            </summary>
            <param name="properties">The list of Properties instances.</param>
            <returns>A string that represents the given list of Properties instances.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.Properties.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.id">
            <summary>
            Unique id of the virtual item
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.name">
            <summary>
            Virtual item name
            Is used also to store localization key for the name
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.description">
            <summary>
            Virtual item description
            Is used also to store localization key for the description
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.image">
            <summary>
            Virtual item image object
            Contains urls to different size of source uploaded image
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.createdAt">
            <summary>
            Date and time when the virtual item was created
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.updatedAt">
            <summary>
            Date and time when the virtual item data was last time updated
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.createdBy">
            <summary>
            User Id who created the virtual item
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.updatedBy">
            <summary>
            User Id who last time updated the item
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.isStackable">
            <summary>
            This field is used to indicate if an item can be stacked
            When you add stackable items to user inventory, the items count is increased
            When you add non stackable items to user inventory, this operation creates
            a new item in inventory
            Only non stackable items can be upgraded
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.isNFT">
            <summary>
            Indicates if the virtual item is a NFT.
            Please use IsNFT() method to check if item is a NFT.
            The NFT virtual items require primary user wallet
            For more information see the API in WalletsModule
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.appIds">
            <summary>
            List of application ids where this item is used
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.tags">
            <summary>
            List of tags to filter the items
            You can place multiple items into one category tag
            For example in a shooter game: "guns", "rifles"
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.childs">
            <summary>
            List of childs of the current virtual item. Virtual items ids list.
            It is used to build tree structure hierarchies.
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.addressableIds">
            <summary>
            List of addressable ids for the virtual item binary data
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.properties">
            <summary>
            List of virtual item custom json. It is used to store game specific
            json in json format.
            For example: you can attach some json like "damage", "range",
            "fireRate" attached to this item
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.prices">
            <summary>
            Array of prices for the virtual item
            A virtual item can be sold for different currencies with different prices
            It is also possible to combine two and more currencies to sell the item
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.totalQuantity">
            <summary>
            How much quantity of the goods left (use only for NFT items)
            </summary>
        </member>
        <member name="F:RGN.Modules.VirtualItems.VirtualItem.blockchain">
            <summary>
            In case the virtual item is minted, the blockchain information is here
            </summary>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItem.IsNFT">
            <summary>
            Checks if the item is NFT. It means the item was minted.
            The purchase process for NFT items goes throught blockchain
            </summary>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItem.GetRGNCoinPrice">
            <summary>
            Returns Virtual Item RGNCoin (rgn-coin) price.
            If the price can not be found throws InvalidOperationException
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItem.GetCustomCoinPrice(System.String)">
            <summary>
            Returns Custom Currency Price with provided currency name.
            If the price with currency name can not be found throws InvalidOperationException
            </summary>
            <param name="currencyName">Valid currency name for current app/game</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:RGN.Modules.VirtualItems.VirtualItemsModule">
            <summary>
            Handle virtual items (Buy, Create, Get, thumbnail)
            </summary>
        </member>
        <member name="T:RGN.Modules.VirtualItems.VirtualItemsModule.Admin">
            <summary>
            Handle critical operations on Virtual Items (delete by appId, delete by ids, delete by name)
            </summary>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.Admin.DeleteVirtualItemsByIdsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Asynchronously deletes specific virtual items from the Ready Games Network by their IDs.
            </summary>
            <param name="virtualItemIds">The list of IDs of the virtual items to be deleted.</param>
            <returns>
            A Task representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when 'virtualItemIds' is null or empty.</exception>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.Admin.DeleteVirtualItemsByNameAsync(System.String)">
            <summary>
            Asynchronously deletes specific virtual items from the Ready Games Network by their name.
            </summary>
            <param name="itemName">The name of the virtual items to be deleted.</param>
            <returns>
            A Task representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when 'itemName' is null or empty.</exception>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.Admin.DeleteVirtualItemByAppIdAsync(System.String)">
            <summary>
            Asynchronously deletes specific virtual items from the Ready Games Network by the App ID.
            </summary>
            <param name="appId">The App ID of the virtual items to be deleted.</param>
            <returns>
            A Task representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when 'appId' is null or empty.</exception>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.Admin.AddFromCSVWithBlockchainStubAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a list of virtual items from a CSV content string to the Ready Games Network.
            Difference from main version is adding blockchain stub for dev tests
            </summary>
            <param name="virtualItemName">The name of the virtual item.</param>
            <param name="csvContent">The content of the CSV file as a string.</param>
            <param name="csvDelimiter">The delimiter used in the CSV file (defaults to ',').</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentException">Thrown when 'virtualItemName', 'csvContent', or 'csvDelimiter' is null or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is canceled via the provided CancellationToken.</exception>
            <returns>
            A Task that represents the asynchronous operation. The Task result contains a list of strings, which are the item IDs of the added virtual items.
            </returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.AddVirtualItemAsync(RGN.Modules.VirtualItems.VirtualItem)">
            <summary>
            Add a virtual item
            </summary>
            <param name="virtualItem"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.AddFromCSVAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a list of virtual items from a CSV content string to the Ready Games Network.
            </summary>
            <param name="virtualItemName">The name of the virtual item.</param>
            <param name="csvContent">The content of the CSV file as a string.</param>
            <param name="csvDelimiter">The delimiter used in the CSV file (defaults to ',').</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentException">Thrown when 'virtualItemName', 'csvContent', or 'csvDelimiter' is null or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is canceled via the provided CancellationToken.</exception>
            <returns>
            A Task that represents the asynchronous operation. The Task result contains a list of strings, which are the item IDs of the added virtual items.
            </returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.UpdateVirtualItemAsync(System.String,RGN.Modules.VirtualItems.VirtualItem)">
            <summary>
            Asynchronously updates a specific virtual item in the Ready Games Network.
            </summary>
            <param name="itemId">The ID of the virtual item to be updated.</param>
            <param name="virtualItem">A VirtualItem object containing the new data for the virtual item.</param>
            <returns>
            A Task representing the asynchronous operation. The result of the Task is the updated VirtualItem.
            </returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.DeleteVirtualItemAsync(System.String)">
            <summary>
            Asynchronously deletes a specific virtual item from the Ready Games Network.
            </summary>
            <param name="itemId">The ID of the virtual item to be deleted.</param>
            <returns>
            A Task representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when 'itemId' is null or empty.</exception>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.GetVirtualItemsAsync">
            <summary>
             Getting all virtual items releated to your game
            </summary>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.GetVirtualItemsAsync(System.Int32,System.String)">
            <summary>
             Returns a limited list of virtual items for your game.
            </summary>
            <param name="limit">Maximal count of items to return</param>
            <param name="startAfter">The item id to start after</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.GetVirtualItemsByIdsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            Return a list of virtual items based on the Id list
            </summary>
            <param name="virtualItemsIds"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.GetByTagsAsync(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Returns a list of virtual items based on tags
            </summary>
            <param name="tags">List of tags to query the virtual items</param>
            <param name="appId">Optional parameter that you can use to retrieve items only for your app
            When you set the tags for Virtual Item, you can use the appId optional parameter
            The app id is attached to every tag and stored in the tags array
            For example:
            tags without appId could look like: "weapons", "rifles"
            tags with appId could look like: "weapons_your.app.id", "rifles_your.app.id"
            </param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.GetTagsAsync(System.String)">
            <summary>
            Returns all tags for specific virtual item
            </summary>
            <param name="virtualItemId"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.SetTagsAsync(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Sets the tags array for a specific virtual item
            </summary>
            <param name="virtualItemId"></param>
            <param name="tags"></param>
            <param name="appId">Optional parameter that you can use to retrieve items only for your app
            When you set the tags for Virtual Item, you can use the appId optional parameter
            The app id is attached to every tag and stored in the tags array
            For example:
            tags without appId could look like: "weapons", "rifles"
            tags with appId could look like: "weapons_your.app.id", "rifles_your.app.id"
            </param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.SetNameAsync(System.String,System.String)">
            <summary>
            Sets the name for a specific virtual item
            </summary>
            <param name="virtualItemId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.SetDescriptionAsync(System.String,System.String)">
            <summary>
            Sets the description for a specific virtual item
            </summary>
            <param name="virtualItemId"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.GetPropertiesAsync(System.String)">
            <summary>
            Returns json string or throws an exception if there are no json for virtual item
            </summary>
            <param name="virtualItemId"></param>
            <returns>Returns json as string</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.SetPropertiesAsync(System.String,System.String)">
            <summary>
            Set json on a given virtualItemId. 
            </summary>
            <param name="virtualItemId"></param>
            <param name="json"></param>
            <returns>Returns json as string</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.UploadImageAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Uploads an image thumbnail for a virtual item to the RGNCore backend.
            </summary>
            <param name="virtualItemId">The ID of the virtual item to upload the thumbnail for.</param>
            <param name="thumbnailTextureBytes">The byte array of the thumbnail texture image to upload.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A boolean indicating whether the upload was successful.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.DownloadImageAsync(System.String,RGN.Model.ImageSize,System.Threading.CancellationToken)">
            <summary>
            Downloads an image asynchronously from a specified virtual item ID.
            </summary>
            <param name="virtualItemId">The ID of the virtual item to download the image from.</param>
            <param name="size">The size type of virtual item image to download.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
            <returns>A byte array containing the image data.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.UploadMaterialTexturesAsync(System.String,System.Collections.Generic.List{System.Byte[]},System.Threading.CancellationToken)">
            <summary>
            Uploads a list of material textures for a virtual item to the RGN backend.
            </summary>
            <param name="virtualItemId">The ID of the virtual item to upload the thumbnail for.</param>
            <param name="materialTexturesBytes">The list of byte arrays of the material textures to upload.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A boolean indicating whether the upload was successful.</returns>
        </member>
        <member name="M:RGN.Modules.VirtualItems.VirtualItemsModule.DownloadMaterialTexturesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads material textures asynchronously for a specified virtual item ID.
            </summary>
            <param name="virtualItemId">The ID of the virtual item to download the material textures.</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
            <returns>A list of byte arrays containing the material textures data.</returns>
        </member>
    </members>
</doc>
